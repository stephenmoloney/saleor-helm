---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "saleor.fullname" . }}-celery-worker
  labels:
    app: {{ template "saleor.name" . }}
    chart: {{ template "saleor.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.saleor.celery.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "saleor.name" . }}-celery-worker
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "saleor.name" . }}-celery-worker
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.saleor.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.saleor.image.pullSecret }}
      {{- end }}
      volumes:
        - name: custom-settings
          configMap:
          {{- if (not .Values.saleor.django.alternativeSettingsConfigMap) }}
            name: {{ template "saleor.fullname" . }}-custom-settings
          {{- else }}
            name: {{ .Values.saleor.django.alternativeSettingsConfigMap }}
          {{- end }}
        - name: saleor-data-media
        {{- if and (eq .Values.saleor.persistence.enabled true) (.Values.saleor.persistence.existingClaim) }}
          persistentVolumeClaim:
            claimName: {{ .Values.saleor.persistence.existingClaim }}
        {{- else if (eq .Values.saleor.persistence.enabled true) }}
          persistentVolumeClaim:
            claimName: {{ default (include "saleor.fullname" .) }}
        {{- else }}
          emptyDir:
            medium: Memory
        {{- end }}
      containers:
        - name: {{ template "saleor.fullname" . }}-celery-worker
          image: "{{ .Values.saleor.image.repository }}:{{ .Values.saleor.image.tag }}"
          imagePullPolicy: {{ .Values.saleor.image.pullPolicy }}
          command: ["celery", "worker"]
          args:
            - --app=saleor.celeryconf:app
            - --without-gossip
            - --without-mingle
            - --heartbeat-interval={{ .Values.saleor.celery.heartBeatIntervalSeconds }}
            - --loglevel={{ .Values.saleor.celery.logLevel }}
          {{- if (eq (.Values.saleor.celery.concurrencyType) "fixed") }}
            - --concurrency={{ .Values.saleor.celery.fixedConcurrency }}
          {{- else if (eq (.Values.saleor.celery.concurrencyType) "auto") }}
            - --autoscale={{ .Values.saleor.celery.maxConcurrency }},{{ .Values.saleor.celery.minConcurrency }}
          {{- end }}
          {{- if (.Values.saleor.celery.hardTimeLimitSeconds) }}
            - --time-limit={{ .Values.saleor.celery.hardTimeLimitSeconds }}
          {{- end }}
          {{- if (.Values.saleor.celery.softTimeLimitSeconds) }}
            - --soft-time-limit={{ .Values.saleor.celery.softTimeLimitSeconds }}
          {{- end }}
          {{- if (eq .Values.saleor.celery.taskEventsMonitoringEnabled true) }}
            - --task-events
          {{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
              {{- if (eq .Values.saleor.celery.autoscaling.enabled false) }}
                # This liveness probe is only suitable if autoscaling is turned off as it can trigger upscaling
                - 'if [[ "$(celery --app=saleor.celeryconf inspect ping | grep pong)" == *"pong"* ]]; then exit 0; else exit 1; fi'
              {{- else if (eq .Values.saleor.celery.autoscaling.enabled true) }}
                - 'echo "ready"'
              {{- end }}
{{ toYaml .Values.saleor.celery.livenessProbeSettings | indent 12 }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
              {{- if (eq .Values.saleor.celery.autoscaling.enabled false) }}
                # This readiness probe is only suitable if autoscaling is turned off as it can trigger upscaling
                # - 'if [[ "$(celery --app=saleor.celeryconf inspect ping | grep pong)" == *"pong"* ]]; then exit 0; else exit 1; fi'
              {{- else if (eq .Values.saleor.celery.autoscaling.enabled true) }}
                - 'echo "ready"'
              {{- end }}
{{ toYaml .Values.saleor.celery.readinessProbeSettings | indent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - name: saleor-data-media
              mountPath: /app/media
            - name: custom-settings
              mountPath: /app/saleor/custom-settings.py
              subPath: custom-settings.py
              readOnly: true
{{- include "saleor.standardEnv" . | indent 10 }}
          resources:
{{ toYaml .Values.saleor.celery.resources | indent 12 }}
    {{- with .Values.saleor.celery.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.saleor.celery.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.saleor.celery.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
